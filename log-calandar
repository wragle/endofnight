#!/usr/bin/env python3

import argparse
from datetime import datetime, timedelta
import argparse
from pathlib import Path
import argcomplete
import os
import sys

def calandar_view(logs_dir_path):
    files = [file.name for file in logs_dir_path.iterdir() if file.is_file()]
    split_names = []
    years = []
    for file in files:
        split = file.split(".")
        if len(split) < 3:
            continue
        split_names.append(split)
        if split[2] not in years:
            years.append(split[2])
    years.sort()

    if len(years) == 0:
        print("Invalid or empty log directory")
        sys.exit(1)
    years.sort()

    try:
        start_date = datetime(int(years[0]), 1, 1)
    except:
        print("Invalid or empty log directory")
        sys.exit(1)
    end_date = datetime.now()

    output = start_date.strftime("[%Y]\n%B\n")
    output += "  " * start_date.weekday()
    count = start_date.weekday() + 1
    total = 0
    new_year = False
    current_date = start_date
    last_date = current_date
    while current_date <= end_date:
        if current_date.year  != last_date.year:
            if (count - 1) % 7 != 0:
                output += "\n"
            output += current_date.strftime("\n[%Y]\n")
            new_year = True
        if current_date.month != last_date.month:
            if (count - 1) % 7 != 0 and not new_year:
                output += "\n"
            if not new_year:
                output += "\n"
            new_year = False
            output += current_date.strftime("%B\n")
            output += "  " * ((count - 1) % 7)
        last_date = current_date

        formatted_date = current_date.strftime("%d.%m.%Y")
        if formatted_date in files:
            output += "x"
            total += 1
        else:
            output += " "
        output += " "
        if count % 7 == 0:
            output += "\n"
        count += 1

        current_date += timedelta(days=1)

    print(output + '\n')
    return total

def get_logs():
    logs = [d.name for d in LOGS_DIR.iterdir() if d.is_dir() and d.name[0] != '.']
    return logs

def main():
    parser = argparse.ArgumentParser()
    logs = get_logs()
    parser.add_argument('log', choices=logs, help='the log to be displayed')
    argcomplete.autocomplete(parser, always_complete_options=False)
    args = parser.parse_args()
    log_dir_path = LOGS_DIR / args.log 
    total = calandar_view(log_dir_path)
    print(f'{total} total entries in {args.log}')
    sys.exit(0)

LOGS_DIR = Path.home() / '.local/share/log'

if __name__ == "__main__":
    main()
