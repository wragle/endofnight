#!/bin/bash

if [ $# -eq 0 ]; then
	echo "Log type is required"
	echo "Usage: log TYPE [OPTION]..."
	exit 1
fi

log_type="$1"
shift

if [ ! -e $HOME/.logs/$log_type ]; then
	echo "$log_type does not exist"
	exit 1
fi

while [[ $# -gt 0 ]]; do
	case "$1" in
		-h|--help)
			help_flag=true
			;;
		-l|--late)
			late_flag=true
			;;
		-s|--seperate)
			seperate_flag=true
			;;
		*)
			echo "Invalid Option: $1"
			exit 1
			;;
	esac
	shift
done

if [ $help_flag ]; then
	echo -e "Log - A simple command-line logging tool
Usage: log TYPE [OPTION]...
    -h, --help            displays this screen
    -l, --late            logs for the previous day
    -s, --seperate        seperates sentences of log files

Made by Anish Rai"
	exit
fi

if [ $seperate_flag ]; then
	cd $HOME/.logs/$log_type
	if [ ! -e .sentences ]; then
		echo "Generating sentences directory"
		mkdir .sentences
	fi
	for file in *; do
		if [ ! -d $file ]; then
			if [ ! -e ./.sentences/$file.sentences ]; then
				echo "Seperating entry into sentences [$file]"
				tail -n +2 $file | tr '\n' ' ' | sed 's/[.!?] /&\n/g' > ./.sentences/$file.sentences
			fi
		fi
	done
	echo "Seperation complete"
	exit 0
fi

if [ $late_flag ]; then
	date=$(date -d "yesterday" +"%d.%m.%Y")
else
	date=$(date +"%d.%m.%Y")
fi

time=$(date +"%-I:%M%P")
file="$HOME/.logs/$log_type/$date"

if [ -e "$file" ]; then
	cat $file
	echo -e "\nLog already exists for: $date\nDo you wish to edit this log? [y/n]"
	read edit

	if [[ "$edit" = "y" ]]; then
		vim "+ normal G $" -Nu $HOME/.config/endofnight/vimrc $file
	elif [[ "$edit" = "n" ]]; then
		exit 0
	else
		echo "Invalid Option"
		exit 1
	fi
else
	touch "$file"
	echo -e "$time, $date\n" > $file
	vim +startinsert -Nu $HOME/.config/endofnight/vimrc +2 $file
fi

echo -e "$log_type entry logged for $date"

# TODO
# i dont think seperate should be a part of the log program
# im thinking log should be slimmed down a bit by removing that
# im also thinking about moving to python to allow some more commands
# commands:
# log create [LOG] -> creates a new log and sets config for it e.g. naming convention, title etc.
# log entry  [LOG] -> creates a log entry
# log search [LOG] -> searches for word in log
#
# [LOG] will be a log name with no spaces
# also maybe the logs could be stored in a different format?
# they could allow for a header line of text
# but they shouldnt really have to store their metadata in plain text at the top of the file
# making the logs json files would work for this but you would lose the ability
# to use command line tools on the entries. maybe this is worth it? i can implement the tools
# i want into this program.
# or maybe have a way to extract the plaintext messages into files
# to be honest the current file storage system isnt that good because you cant have multiple
# entries on the same day, and they dont order that well, and the metadata isnt stored that well
# ill have a think about all these things... 
