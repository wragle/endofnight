#!/usr/bin/env python3

import argparse, argcomplete
from datetime import datetime, timedelta
import re
import os
import sys
import subprocess
from pathlib import Path

def calandar_view(log_dir_path, regex, **kwargs):
    occurrence_flag = kwargs.get('occurrences', False)
    files = [file.name for file in log_dir_path.iterdir() if file.is_file() and file.name[0] != '.'] 
    split_names = []
    years = []
    for file in files:
        split = file.split(".")
        if len(split) < 3:
            continue
        split_names.append(split)
        if split[2] not in years:
            years.append(split[2])

    if len(years) == 0:
        print("Invalid or empty log directory")
        sys.exit(1)
    years.sort()

    try:
        start_date = datetime(int(years[0]), 1, 1)
    except:
        print("Invalid or empty log directory")
        sys.exit(1)
    end_date = datetime.now()

    output = start_date.strftime("[%Y]\n%B\n")
    output += "  " * start_date.weekday()
    count = start_date.weekday() + 1
    new_year = False
    current_date = start_date
    last_date = current_date
    while current_date <= end_date:
        if current_date.year  != last_date.year:
            if (count - 1) % 7 != 0:
                output += "\n"
            output += current_date.strftime("\n[%Y]\n")
            new_year = True
        if current_date.month != last_date.month:
            if (count - 1) % 7 != 0 and not new_year:
                output += "\n"
            if not new_year:
                output += "\n"
            new_year = False
            output += current_date.strftime("%B\n")
            output += "  " * ((count - 1) % 7)
        last_date = current_date

        formatted_date = current_date.strftime("%d.%m.%Y")
        if formatted_date in files:
            with open(log_dir_path / formatted_date, 'r') as file:
                contents = file.read()
            occurrences = re.findall(regex, contents)
            if len(occurrences):
                output += f"{BOLD}{COLOUR}{len(occurrences) if occurrence_flag else 'x'}{DEFAULT}"
            else:
                output += "x"
        else:
            output += " "
        output += " "
        if count % 7 == 0:
            output += "\n"
        count += 1
        current_date += timedelta(days=1)
    print(output)

def path_to_formatted_date(file_path):
    def ordinal(n):
        if 10 <= n % 100 <= 20:
            suffix = 'th'
        else:
            suffix = {1: 'st', 2: 'nd', 3: 'rd'}.get(n % 10, 'th')
        return str(n) + suffix
    date_str = file_path.stem
    date = datetime.strptime(date_str, '%d.%m.%Y')
    day = ordinal(date.day)
    return date.strftime(f'{day} %B, %Y')
    

def lines_view(log_dir_path, regex, **kwargs):
    reverse_flag = kwargs.get('reverse', False)
    sentences_dir = log_dir_path / '.sentences'
    files = [file_path for file_path in sentences_dir.glob('*.sentences')]
    def get_date(file_path):
        date_str = file_path.stem
        return datetime.strptime(date_str, '%d.%m.%Y')
    sorted_files = sorted(files, key=get_date)
    if reverse_flag:
        sorted_files.reverse()
    for file_path in sorted_files:
        result = subprocess.run(['egrep', '-o', '--color=auto', regex, str(file_path)], stdout=subprocess.PIPE, text=True)
        if result.returncode == 0:
            print(f"\n{path_to_formatted_date(file_path)}")
            subprocess.run(['egrep', '--color=always', regex, str(file_path)])
    print()

def count_mentions(log_dir_path, regex):
    files = [file.name for file in log_dir_path.iterdir() if file.is_file() and file.name[0] != '.']
    total = 0
    for file_name in files:
        with open(log_dir_path / file_name, 'r') as file:
            contents = file.read()
        occurrences = re.findall(regex, contents)
        total += len(occurrences)
    return total


def get_logs():
    logs = [d.name for d in LOGS_DIR.iterdir() if d.is_dir() and d.name[0] != '.']
    return logs

def main():
    logs = get_logs()
    parser = argparse.ArgumentParser(description="Search for RegExps in your Logs")
    parser.add_argument('-c', '--calandar', action='store_true', help='calandar view')
    parser.add_argument('-l', '--lines', action='store_true', help='lines view')
    parser.add_argument('-r', '--reverse', action='store_true', help='reverse ordering for lines view') 
    parser.add_argument('-o', '--occurrences', action='store_true', help='show number of occurrences in calandar view')
    parser.add_argument('log', choices=logs, help='the log to be searched')
    parser.add_argument('regex', help='the regex to be searched for')
    argcomplete.autocomplete(parser, always_complete_options=False)
    args = parser.parse_args()
    try:
        regex = re.compile(args.regex)
    except re.error as e:
        print(f'Invalid regex pattern: {e}')
        sys.exit(1)
    log_dir_path = LOGS_DIR / args.log
    if args.calandar:
        calandar_view(log_dir_path, regex, occurrences=args.occurrences)
    if args.lines:
        lines_view(log_dir_path, args.regex, reverse=args.reverse)
    mentions = count_mentions(log_dir_path, regex)
    print(f'{BOLD}{COLOUR}{mentions}{DEFAULT} mention'+('s' if mentions == 0 or mentions > 1 else ''))
    sys.exit(0)

COLOUR = "\033[35m"
BOLD = "\033[1m"
DEFAULT = "\033[0m"
LOGS_DIR = Path.home() / '.logs'

if __name__ == "__main__":
    main()
